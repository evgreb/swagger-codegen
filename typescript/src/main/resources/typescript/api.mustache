import { buildPathString, buildQueryString } from "../utils";
{{#imports}}
import { {{classname}} } from '../{{filename}}';
{{/imports}}

export default class {{classname}} {

{{#operations}}
{{#operation}}

    {{operationId}} = ({{#hasRequiredParams}}
        {{#requiredParams}}
        {{paramName}}: {{dataType}},
        {{/requiredParams}}
    {{/hasRequiredParams}}
    {{#hasOptionalParams}}
        options: {
        {{#allParams}}{{^required}}
            {{paramName}}?: {{{dataType}}}{{#hasMore}},{{/hasMore}}
        {{/required}}
        {{/allParams}}
        } = {},
    {{/hasOptionalParams}}
        init: RequestInit = {}) => {
    {{#hasRequiredParams}}
        {{#requiredParams}}
            {{#isConstEnumParam}}
                let {{paramName}} = {{{dataType}}};
            {{/isConstEnumParam}}
            {{^isConstEnumParam}}
                if ({{paramName}} === null || {{paramName}} === undefined) {
                throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
                }
            {{/isConstEnumParam}}
        {{/requiredParams}}
    {{/hasRequiredParams}}
    {{#hasOptionalParams}}
        const {
        {{#allParams}}{{^required}}
            {{paramName}}{{#hasMore}},{{/hasMore}}
        {{/required}}
        {{/allParams}}
        } = options;
    {{/hasOptionalParams}}

    const path = buildPathString("{{path}}", {
        {{#pathParams}}
        {{paramName}}{{#hasMore}},{{/hasMore}}
        {{/pathParams}}
    })

    const query = buildQueryString(path, {
    {{#queryParams}}
        {{baseName}}: {{paramName}}{{#hasMore}},{{/hasMore}}
    {{/queryParams}}
    })

    return fetch(query, {
        ...init,
        method: "{{httpMethod}}"{{#hasHeaderParams}},
        headers: {
        {{#headerParams}}
            {{baseName}}: {{paramName}}{{#hasMore}},{{/hasMore}}
        {{/headerParams}}
        }
        {{/hasHeaderParams}}
    })
    }
{{/operation}}
{{/operations}}
}