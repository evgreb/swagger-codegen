import ApiClient from "../ApiClient";
import { buildPathString, buildQueryString, handleErrors } from "../utils";
{{#imports}}
import { {{classname}} } from '../{{filename}}';
{{/imports}}

export default class {{classname}} {
    private apiClient: ApiClient;

    constructor(apiClient: ApiClient) {
        this.apiClient = apiClient;
    }
{{#operations}}
{{#operation}}

    {{operationId}} = ({{#hasRequiredParams}}
        {{#requiredParams}}
        {{paramName}}: {{dataType}},
        {{/requiredParams}}
    {{/hasRequiredParams}}
        options: {
        {{#allParams}}{{^required}}
            {{paramName}}?: {{{dataType}}}{{#hasMore}},{{/hasMore}}
        {{/required}}
        {{/allParams}}
        } = {},
        init: RequestInit = {}): Promise<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Response{{/returnType}}> => {
    {{#hasRequiredParams}}
        {{#requiredParams}}
            {{#isConstEnumParam}}
                let {{paramName}} = {{{dataType}}};
            {{/isConstEnumParam}}
            {{^isConstEnumParam}}
                if ({{paramName}} === null || {{paramName}} === undefined) {
                throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
                }
            {{/isConstEnumParam}}
        {{/requiredParams}}
    {{/hasRequiredParams}}
    {{#hasOptionalParams}}
        const {
        {{#allParams}}{{^required}}
            {{paramName}}{{#hasMore}},{{/hasMore}}
        {{/required}}
        {{/allParams}}
        } = options;
    {{/hasOptionalParams}}

    const path = this.apiClient.apiUrl + buildPathString("{{path}}", {
        {{#pathParams}}
        {{paramName}}{{#hasMore}},{{/hasMore}}
        {{/pathParams}}
    })

    const query = buildQueryString(path, {
    {{#queryParams}}
        {{baseName}}: {{paramName}}{{#hasMore}},{{/hasMore}}
    {{/queryParams}}
    })

    let body = {{#bodyParam}}JSON.stringify({{#required}}{{{paramName}}}{{/required}}{{^required}}options['{{paramName}}']{{/required}}){{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};

    {{#hasFormParams}}
    body = new FormData();
    {{#formParams}}
    {{#required}}
    body.append("{{baseName}}", {{paramName}});
    {{/required}}
    {{^required}}
    if (options['{{paramName}}'] !== undefined) {
        body.append("{{baseName}}", options['{{paramName}}']);
    }
    {{/required}}
    {{/formParams}}
    {{/hasFormParams}}
    {{^hasFormParams}}
    let contentType = "application/json";
    {{/hasFormParams}}

    return this.apiClient.fetch(query, {
        ...init,
        method: "{{httpMethod}}",
        body,
        headers: {
            ...init.headers,
        {{^hasFormParams}}
            "Content-Type": contentType,
        {{/hasFormParams}}
        {{#headerParams}}
            {{baseName}}: {{paramName}} || ""{{#hasMore}},{{/hasMore}}
        {{/headerParams}}
        }
    }).then(handleErrors).then<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}} Response {{/returnType}}>((response: Response) => {
    {{#returnType}}
        {{#returnTypeIsPrimitive}}
        return response.text() as unknown as {{{returnType}}};
        {{/returnTypeIsPrimitive}}
        {{^returnTypeIsPrimitive}}
        return response.json();
        {{/returnTypeIsPrimitive}}
    {{/returnType}}
    {{^returnType}}
        return response;
    {{/returnType}}
    })
    }
{{/operation}}
{{/operations}}
}